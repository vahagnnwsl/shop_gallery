<% layout('../layout/app') -%>
<div class="product-wrap" id="products">
    <div class="font-up-bold text-uppercase" v-if="breadcrumb.category">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb cyan lighten-4">
                <li class="breadcrumb-item"><a class="" href="/">Home</a></li>
                <li class="breadcrumb-item"><a class=""
                        :href="'/category/' + categoryID">{{breadcrumb.category.name}}</a></li>
                <li class="breadcrumb-item"><a class="" :href="'/category/' + categoryID + '/subCategory/' + subCategoryID">{{breadcrumb.subCategory.name}}</a></li>
                <li class="breadcrumb-item active">{{breadcrumb.subSubCategory.name}}/</li>
            </ol>   
        </nav>
    </div>

    <div class="text-left">
        <input type="text" v-model="searchAlbum" id="searchAlbum" name="searchAlbum" @change="onSearchAlbumNameChange($event)"  placeholder="Search album...">
    </div>
    <br>

    <label v-if="checkedAlbums.length && !detailMode">{{this.checkedAlbums.length}} item(s) selected  </label>
    <button @click.prevent="showMoveToModal()" v-if="checkedAlbums.length && !detailMode" class="btn btn-blue btn-rounded btn-md">Move to...</button>
    <br/><br/>

    <div class="modal fade" id="moveModal" tabindex="-1" role="dialog" aria-labelledby="moveModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title w-100 font-weight-bold" id="moveModalLabel">Move to ...</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="path">Path</label>
                    <div name="path">
                        <select v-model="batchCategory" style="width: 30%;" @change="onBatchCategoryChange($event)" :required="batchCategory">
                            <option v-if="categories" v-for="cat in categories" v-bind:value="cat.categoryID">{{cat.name}}</option>
                        </select>
                        <select v-model="batchSubCategory" style="width: 30%;" @change="onBatchSubCategoryChange($event)" :required="batchSubCategory">
                            <option v-if="subCategories1" v-for="subcat in subCategories1" v-bind:value="subcat.subCategoryID">{{subcat.name}}</option>
                        </select>
                        <select v-model="batchSubSubCategory" style="width: 30%;" @change="onBatchSubSubCategoryChange($event)" :required="batchSubSubCategory">
                            <option v-if="subSubCategories1" v-for="subsubcat in subSubCategories1" v-bind:value="subsubcat.subSubCategoryID">{{subsubcat.name}}</option>
                        </select>
                    </div>
                    <p v-if="errors_movemodal.length">
                        <ul style="color:red;">
                          <li v-for="error in errors_movemodal">{{ error }}</li>
                        </ul>
                      </p>
                </div>
            </div>
            <div class="modal-footer">
              <!-- <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button> -->
              <button type="button" class="btn btn-default" @click.prevent="savePath()">Save changes</button>
            </div>
          </div>
        </div>
      </div>

    <div class="row" v-show="!detailMode">
        <div v-for="(item, index) in products" :key="index" class="col-6 col-sm-4 col-md-2 mb-2">
            <input type="checkbox" class="checkbox" v-model="checkedAlbums" :value="item._id" style="position:absolute; margin-top: 5px; margin-left:5px; z-index: 100; transform: scale(1.5);"/>
            <div class="card">
                <div class="view overlay">
                    <img class="card-img-top" :src="item.images[item.cover!==undefined?item.cover:0]"  alt="Card image cap">
                    <a @click.prevent="viewDetail(item, index)">
                        <div class="mask rgba-white-slight"></div>
                    </a>
                </div>
                <div class="rounded-bottom mdb-color lighten-3 text-center pt-3">
                    <ul class="list-unstyled list-inline font-small m-0">
                        
                        <input type="text" class="small list-inline-item pr-2 float-left ml-1" style="width: 63%;" v-model="item.name" @change="onAlbumNameChange($event, item._id)"/>
                        
                        <li class="list-inline-item float-right mr-1">
                            <p class="white-text small"><i class="fas fa-images mr-1"></i>{{item.images.length}}</p>
                        </li>

                        <li class="list-inline-item float-right mr-2">
                            <p class="white-text small"><i class="fas fa-trash-alt" @click.prevent="deleteAlbum(item._id)" style="cursor: pointer;"></i></p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div v-if="products.length==0">
            <div class="ml-4">
                <h4>There are no Items</h4>
            </div>
        </div>
    </div>
    <div v-if="products.length && !detailMode" class="d-flex">
        <nav aria-label="Page navigation example" class="m-auto">
            <ul class="pagination pagination-circle pg-blue">
                <li class="page-item" :class="currentPage == 1 ? 'disabled': ''"><a class="page-link"
                        @click.prevent="setPage(1)">First</a></li>
                <li class="page-item" :class="currentPage == 1 ? 'disabled': ''">
                    <a class="page-link" aria-label="Previous" @click.prevent="setPage(currentPage - 1)">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
                <li class="page-item" :class="item==currentPage?'active':''" v-for="(item, index) in paginationArray"
                    :key="index"><a class="page-link" @click.prevent="setPage(item)">{{item}}</a></li>
                <li class="page-item" :class="currentPage == totalPageNum ? 'disabled': ''">
                    <a class="page-link" aria-label="Next" @click.prevent="setPage(currentPage + 1)">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
                <li class="page-item" :class="currentPage == totalPageNum ? 'disabled': ''"><a class="page-link"
                        @click.prevent="setPage(totalPageNum)">Last</a></li>
            </ul>
        </nav>
    </div>
    <div class="modal fade" id="productEdit" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <h5 class="modal-title w-100 font-weight-bold">Edit Product</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body mx-3">
                    <form id="categoryForm" class="needs-validation" novalidate>
                        <div class="form-group">
                            <label for="albumName">Album Name</label>
                            <input type="text" class="form-control" id="albumName" v-model="detailData.name"
                                placeholder="Album Name">
                        </div>
                        <div class="form-group shadow-textarea">
                            <label for="productDescription">Description</label>
                            <textarea class="form-control z-depth-1" id="productDescription" rows="8"
                                placeholder="Write something here..." v-model="detailData.description"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="tag">Tag</label>
                            <input type="text" class="form-control" id="tag" v-model="detailData.tag"
                                placeholder="Please enter tag...">
                        </div>
                            <label for="path">Path</label>
                            <div name="path">
                                <select v-model="editCategory" style="width: 30%;" @change="onCategoryChange($event)" :required="!editCategory">
                                    <option v-if="categories" v-for="cat in categories" v-bind:value="cat.categoryID">{{cat.name}}</option>
                                </select>
                                <select v-model="editSubCategory" style="width: 30%;" @change="onSubCategoryChange($event)" :required="!editSubCategory">
                                    <option v-if="subCategories" v-for="subcat in subCategories" v-bind:value="subcat.subCategoryID">{{subcat.name}}</option>
                                </select>
                                <select v-model="editSubSubCategory" style="width: 30%;" @change="onSubSubCategoryChange($event)" :required="!editSubSubCategory">
                                    <option v-if="subSubCategories" v-for="subsubcat in subSubCategories" v-bind:value="subsubcat.subSubCategoryID">{{subsubcat.name}}</option>
                                </select>
                            </div>
                            <p v-if="errors.length">
                                <ul style="color:red;">
                                  <li v-for="error in errors">{{ error }}</li>
                                </ul>
                              </p>
                        
                    </form>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-default btn-rounded" @click.prevent="saveChanges()">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="detail-section" v-show="detailMode" v-if="detailMode" class="col-6 col-sm-4 col-md-2 mb-2">
        <div class="row">
            <button class="btn btn-primary ml-auto btn-rounded" @click.prevent="viewProducts()">Go back</button>
        </div>
        <div class="row">
            <div class="col-md-2 col-sm-4 col-xs-12">
                <img :src="detailData.images[detailData.cover!==undefined?detailData.cover:0]" alt="thumbnail" width="100%">
            </div>
            <div class="col-md-10 col-xs-12">
                <h3>{{detailData.name}} | {{detailData.images.length}}</h3>
                <p>{{detailData.description}}</p>
                <div class="row">
                    <div class="col-xs-6">
                        <a href="javascript:void(0)" class="btn btn-purple btn-rounded" data-toggle="modal"
                            data-target="#productEdit">Edit</a>
                        <label  v-if="detailData.tag" for="tagname">&nbsp;&nbsp;&nbsp;Search albums by tag:&nbsp;&nbsp;</label>
                        <button class="btn btn-purple btn-rounded" v-if="detailData.tag" @click.prevent="searchByTag(detailData.tag)">{{detailData.tag}}</button>
                    </div>
                    <div class="btn-group ml-auto col-xs-6" role="group" aria-label="options">
                        <button type="button" class="btn btn-purple btn-rounded" @click.prevent="changeView('col-2')"><i
                                class="fas fa-icons pr-2"></i>
                            Small</button>
                        <button type="button" class="btn btn-purple btn-rounded" @click.prevent="changeView('col-3')"><i
                                class="far fa-images pr-2"></i>Detail</button>
                        <button type="button" class="btn btn-purple btn-rounded"
                            @click.prevent="changeView('col-12')"><i class="far fa-image pr-2"></i></i>Big</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-5 gallery">
            <div :class="viewMode" v-for="(item, index) in detailData.images" :key="index">
                
                <a :href="item">
                    <img :src="item" alt="image" width="100%" class="p-2">
                </a>
                <div v-if="viewMode != 'col-2'">
                    <button @click.prevent="setCover(index, detailData._id)" type="button" class="btn btn-pink btn-rounded btn-md">&nbsp;&nbsp;Set as cover image</button>
                    <p class="detail-name pl-2 m-0">{{item.split('/')[item.split('/').length-1]}}</p>
                    <p class="detail-date pl-2 m-0">{{changeDateformat(detailData.created_at)}}</p>         
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    new Vue({
        el: "#products",
        data() {
            return {
                breadcrumb: [],
                products: [],
                detailData: {},
                detailMode: false,
                viewMode: 'col-3',
                currentPage: 1,
                productsCount: 0,
                totalPageNum: 0,
                paginationArray: [],
                categoryID: '',
                subCategoryID: '',
                subSubCategoryID: '',
                loader: {},
                index: 0,
                error:'',
                searchAlbum:'',
                tag:'',
                editCategory:'',
                editSubCategory:'',
                editSubSubCategory:'',
                categories:[],
                subCategories:[],
                subSubCategories:[],
                subCategories1: [],
                subSubCategories1: [],
                errors:[],
                checkedAlbums:[],
                batchCategory:'',
                batchSubCategory:'',
                batchSubSubCategory:'',
                errors_movemodal:[],
                showMoveModal:false,

            }
        },
        computed:{
            filteredList(){
              return this.products.filter(item=>item.name.toLowerCase().includes(this.searchAlbum.toLowerCase())==true)
            }
        },
        methods: {
            deleteAlbum(id){
                swal({
                    title: "Confirm",
                    text: "Are you sure to delete this Album?",
                    icon: "warning",
                    button: "OK",
                    })
                    .then((willDelete) => {
                        if (willDelete) {
                            $.ajax({
                                url: `deleteAlbum/${id}`,
                                method: 'GET'
                            }).done(async (res) => {
                                if(res.status){
                                    location.reload();
                                    console.log(res.msg);
                                }
                            })
                        }
                    }).catch((err) => {
                        console.log("Error occupied on deleteAlbum function");
                    });
            },
            showMoveToModal(){
                $("#moveModal").modal();
            },
            onSearchAlbumNameChange(event){
                let name = event.target.value;
                console.log("search_albumname changed into this:", name);
                this.getProducts(1);
            },
            onAlbumNameChange(event, _id){
                let name = event.target.value;
                $.ajax({
                    method:"POST",
                    url:'/setAlbumName',
                    data:{
                        _id, name
                    }
                }).done(res=>{
                    if(res.status){
                        console.log(res.msg);
                    }else{
                        console.log(res.msg);
                    }
                })
            },
            onCategoryChange(event){
                this.getSubCategories(event.target.value, true);
                this.subSubCategories = [];
                this.editSubCategory ='';
                this.editSubSubCategory = '';
            },
            onBatchCategoryChange(event){
                this.getSubCategories(event.target.value, false);
                this.subSubCategories1 = [];
                this.batchSubCategory = '';
                this.batchSubSubCategory = '';
                this.errors_movemodal = [];
            },
            onSubCategoryChange(event){
                this.getSubSubCategories(this.editCategory, event.target.value, true);
                this.editSubSubCategory = '';
            },
            onBatchSubCategoryChange(event){
                this.getSubSubCategories(this.batchCategory, event.target.value, false);
                this.batchSubSubCategory = '';
                this.errors_movemodal = [];
            },
            onSubSubCategoryChange(event){
                console.log("--SubSubCategory changed into this---", event.target.value);
            },
            onBatchSubSubCategoryChange(event){
                console.log("---Batch SubSubCategory path changed into---", this.batchCategory, this.batchSubCategory, event.target.value);
                this.errors_movemodal = [];
            },
            setCover(cover, _id){
                this.openLoader();
                $.ajax({
                    method:"POST",
                    url:"/setCover",
                    data:{
                        cover, _id
                    }
                }).done(res=>{                   
                    this.loader.hide();
                    location.reload();
                })
            },
            savePath(){
                let categoryID = this.batchCategory;
                let subCategoryID = this.batchSubCategory;
                let subSubCategoryID = this.batchSubSubCategory;
                this.errors_movemodal = [];
                if(!categoryID){
                    this.errors_movemodal.push("Please select Category.");
                    this.errors_movemodal.push("Please select SubCategory.");
                    this.errors_movemodal.push("Please select SubSubCategory.");
                }else if(!subCategoryID){
                    this.errors_movemodal.push("Please select SubCategory.");
                    this.errors_movemodal.push("Please select SubSubCategory.");
                }else if(!subSubCategoryID){
                    this.errors_movemodal.push("Please select SubSubCategory.");
                }else{
                    console.log("this is savePatch() function", this.checkedAlbums, categoryID, subCategoryID, subSubCategoryID);
                    let selectedAlbums = JSON.stringify(this.checkedAlbums);
                    this.openLoader();
                    $.ajax({
                        method: "POST",
                        url: "/editProductPath",
                        data: {
                            selectedAlbums, categoryID, subCategoryID, subSubCategoryID
                        }
                    }).done(res => {
                        this.loader.hide();
                        if (res.status) {
                            $('#moveModal').modal('hide')
                            location.reload();
                        } else {
                            this.error = 'Something went wrong'
                        }
                    })
                }
            },
            saveChanges() {
                this.products[this.index] = this.detailData;
                let categoryID = this.editCategory;
                let subCategoryID = this.editSubCategory;
                let subSubCategoryID = this.editSubSubCategory;
                this.errors = [];
                if(!this.editCategory || !this.editSubCategory || !this.editSubSubCategory){
                    if(!this.editCategory){
                        this.errors.push("Category required.");
                    }
                    if(!this.editSubCategory){
                        this.errors.push("SubCategory required.");
                    }
                    if(!this.editSubSubCategory){
                        this.errors.push("SubSubCategory required.");
                    }
                }else{
                    this.openLoader();
                    let { name, description, _id, tag } = this.detailData;
                    $.ajax({
                        method: "POST",
                        url: "/editProduct",
                        data: {
                            name, description, _id, tag, categoryID, subCategoryID, subSubCategoryID
                        }
                    }).done(res => {
                        this.loader.hide();
                        if (res.status) {
                            $('#productEdit').modal('hide')
                            location.reload();
                        } else {
                            this.error = 'Something went wrong'
                        }
                    })
                }
            },
            openLoader() {
                this.loader = this.$loading.show({
                    loader: 'dots',
                    backgroundColor: '#ffffff',
                    opacity: 0.5,
                    transparence: 0.5
                });
            },
            getProducts(page) {
                this.openLoader()
                $.ajax({
                    method: "POST", 
                    url: `/getProducts`,
                    data: {
                        categoryID: this.categoryID,
                        subCategoryID: this.subCategoryID,
                        subSubCategoryID: this.subSubCategoryID,
                        name:this.searchAlbum,
                        page,
                    }
                }).done(res => {
                    if (res.status) {
                        if (res.breadcrumb) this.breadcrumb = res.breadcrumb
                        this.products = res.data;
                        if (res.productsCount) {
                            this.productsCount = res.productsCount;
                            let reminder = this.productsCount % 100 == 0 ? 0 : 1;
                            this.totalPageNum = Math.floor(this.productsCount / 100) + reminder
                        };
                        this.getPaginationArray(page);
                        this.loader.hide()
                    }
                })
            },
            searchByTag(tag){
                location.href="/search?tag="+tag;
                
            },
            getCategories(){
                $.ajax({
                    method:"GET",
                    url:'/getCategory'
                }).done(res=>{
                    if(res.status){
                        this.categories = res.data;
                    }else{
                        console.log("Error occupied in getCategory function of productView.ejs.");
                    }
                    console.log("this is the result of the request:---", res);
                })
            },
            getSubCategories(categoryID, flag){
                $.ajax({
                    method:"POST",
                    url:'/getSubCategory',
                    data:{
                        categoryID: categoryID
                    }
                }).done(res=>{
                    if(res.status){
                        if(flag){
                            this.subCategories =  res.data;
                        }else{
                            this.subCategories1 = res.data;
                        }
                        
                    }else{
                        console.log("Error occupied in getSubCategory function of productView.ejs");
                    }
                })
            },
            getSubSubCategories(categoryID, subCategoryID, flag){
                $.ajax({
                    method:"POST",
                    url:'/getSubSubCategory',
                    data:{
                        categoryID:categoryID,
                        subCategoryID: subCategoryID
                    }
                }).done(res=>{
                    if(res.status){
                        if(flag){
                            this.subSubCategories = res.data;
                        }else{
                            this.subSubCategories1 = res.data;
                        }
                        
                    }else{
                        console.log("Error occupied in getSubSubCategory function of productView.ejs");
                        
                    }
                })
            },
            viewDetail(item, index) {
                this.index = index;
                this.detailData = item;
                this.detailMode = true;
                setTimeout(() => {
                    $(".gallery").magnificPopup({
                        delegate: "a",
                        type: "image",
                        tLoading: "Loading image #%curr%...",
                        mainClass: "mfp-img-mobile",
                        gallery: {
                            enabled: true,
                            navigateByImgClick: true,
                            preload: [0, 1] // Will preload 0 - before current, and 1 after the current image
                        },
                        image: {
                            tError: '<a href="%url%">The image #%curr%</a> could not be loaded.'
                        }
                    });
                }, 50);
            },
            setPage(page) {
                this.getPaginationArray(page);
                this.getProducts(page)
            },
            getPaginationArray(page) {
                this.currentPage = page
                this.paginationArray = []
                if (page < 4) {
                    for (let i = 1; i <= this.totalPageNum; i++) {
                        this.paginationArray.push(i);
                        if (this.paginationArray.length == 5) break;
                    }
                    return
                }
                if (page > this.totalPageNum - 4) {
                    for (let i = this.totalPageNum - 4; i <= this.totalPageNum; i++) {
                        this.paginationArray.push(i)
                    }
                    return
                }
                for (let i = page - 2; i <= page + 2; i++) {
                    this.paginationArray.push(i)
                }
            },
            viewProducts() {
                this.detailMode = false;
            },
            changeView(mode) {
                this.viewMode = mode
            },
            changeDateformat(timestamp) {
                let date = new Date(timestamp)
                return date.toLocaleString();
            }
        },
        mounted() {
            let param = new URL(window.location.href).pathname
            param = param.split('/subCategory/')
            this.categoryID = param[0].split('category/')[1];
            this.subCategoryID = param[1].split('/subSubCategory/')[0];
            this.subSubCategoryID = param[1].split('/subSubCategory/')[1];
            setTimeout(() => {
                this.getProducts(1);
                this.categories = this.getCategories();
                this.subCategories = this.getSubCategories(this.categoryID, true);
                this.subCategories1 = this.getSubCategories(this.categoryID, false);
                this.subSubCategories = this.getSubSubCategories(this.categoryID, this.subCategoryID, true);
                this.subSubCategories1 = this.getSubSubCategories(this.categoryID, this.subCategoryID, false);
                this.editCategory = this.categoryID;
                this.editSubCategory = this.subCategoryID;
                this.editSubSubCategory = this.subSubCategoryID;
                this.batchCategory = this.categoryID;
                this.batchSubCategory = this.subCategoryID;
                this.batchSubSubCategory = this.subSubCategoryID;
            }, 200);
        },
    })
</script>