<% layout('../layout/app_user') -%>
<div class="product-wrap" id="products">
    <div class="font-up-bold text-uppercase" v-if="breadcrumb.category">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb cyan lighten-4">
                <li class="breadcrumb-item"><a class="" href="/">Home</a></li>
                <li class="breadcrumb-item"><a class=""
                                               :href="'/category/' + categoryID">{{breadcrumb.category.name}}</a></li>
                <li class="breadcrumb-item"><a class=""
                                               :href="'/category/' + categoryID + '/subCategory/' + subCategoryID">{{breadcrumb.subCategory.name}}</a>
                </li>
                <li class="breadcrumb-item active">{{breadcrumb.subSubCategory.name}}/</li>
            </ol>
        </nav>
    </div>

    <div class="text-left">
        <input type="text" v-model="searchAlbum" id="searchAlbum" name="searchAlbum"
               @change="onSearchAlbumNameChange($event)" placeholder="Search album...">
    </div>
    <br>
    <div class="row" v-show="!detailMode">
        <div v-for="(item, index) in products" :key="index" class="col-6 col-sm-4 col-md-2 mb-2">
            <div class="card">
                <div class="view overlay">
                    <img class="card-img-top" :src="item.images[item.cover!==undefined?item.cover:0]" height="170"
                         alt="Card image cap">
                    <a @click.prevent="viewDetail(item, index)">
                        <div class="mask rgba-white-slight"></div>
                    </a>
                </div>
                <div class="rounded-bottom mdb-color lighten-3 text-center pt-3">
                    <ul class="list-unstyled list-inline font-small m-0">
                        <li class="list-inline-item pr-2 text-white float-left ml-3">
                            <p class="small">{{item.name}}</p>
                        </li>
                        <li class="list-inline-item float-right mr-2">
                            <p class="white-text small"><i class="fas fa-images mr-2"></i>{{item.images.length}}</p>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div v-if="products.length==0">
            <div class="ml-4">
                <h4>There are no Items</h4>
            </div>
        </div>
    </div>
    <div v-if="products.length && !detailMode" class="d-flex">
        <nav aria-label="Page navigation example" class="m-auto">
            <ul class="pagination pagination-circle pg-blue">
                <li class="page-item" :class="currentPage == 1 ? 'disabled': ''"><a class="page-link"
                                                                                    @click.prevent="setPage(1)">First</a>
                </li>
                <li class="page-item" :class="currentPage == 1 ? 'disabled': ''">
                    <a class="page-link" aria-label="Previous" @click.prevent="setPage(currentPage - 1)">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>
                <li class="page-item" :class="item==currentPage?'active':''" v-for="(item, index) in paginationArray"
                    :key="index"><a class="page-link" @click.prevent="setPage(item)">{{item}}</a></li>
                <li class="page-item" :class="currentPage == totalPageNum ? 'disabled': ''">
                    <a class="page-link" aria-label="Next" @click.prevent="setPage(currentPage + 1)">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
                <li class="page-item" :class="currentPage == totalPageNum ? 'disabled': ''"><a class="page-link"
                                                                                               @click.prevent="setPage(totalPageNum)">Last</a>
                </li>
            </ul>
        </nav>
    </div>

    <div class="detail-section" v-show="detailMode" v-if="detailMode" class="col-6 col-sm-4 col-md-2 mb-2">
        <div class="row">
            <button class="btn btn-primary ml-auto btn-rounded" @click.prevent="viewProducts()">Go back</button>
        </div>
        <div class="row">
            <div class="col-md-2 col-sm-4 col-xs-12">
                <img :src="detailData.images[detailData.cover!==undefined?detailData.cover:0]" alt="thumbnail"
                     width="100%">
            </div>
            <div class="col-md-10 col-xs-12">
                <h3>{{detailData.name}} | {{detailData.images.length}}</h3>
                <p>{{detailData.description}}</p>
                <div class="row">
                    <div class="col-xs-6">
                        <label v-if="detailData.tag" for="tagname">&nbsp;&nbsp;&nbsp;Search albums by
                            tag:&nbsp;&nbsp;</label>
                        <button class="btn btn-purple btn-rounded" v-if="detailData.tag"
                                @click.prevent="searchByTag(detailData.tag)">{{detailData.tag}}
                        </button>
                    </div>
                    <div class="btn-group ml-auto col-xs-6" role="group" aria-label="options">
                        <button type="button" class="btn btn-purple btn-rounded" @click.prevent="changeView('col-2')"><i
                                    class="fas fa-icons pr-2"></i>
                            Small
                        </button>
                        <button type="button" class="btn btn-purple btn-rounded" @click.prevent="changeView('col-3')"><i
                                    class="far fa-images pr-2"></i>Detail
                        </button>
                        <button type="button" class="btn btn-purple btn-rounded"
                                @click.prevent="changeView('col-12')"><i class="far fa-image pr-2"></i></i>Big
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-5 gallery">
            <div :class="viewMode" v-for="(item, index) in detailData.images" :key="index">

                <a :href="item">
                    <img :src="item" alt="image" width="100%" class="p-2">
                </a>
                <div v-if="viewMode != 'col-2'">
                    <p class="detail-name pl-2 m-0">{{item.split('/')[item.split('/').length-1]}}</p>
                    <p class="detail-date pl-2 m-0">{{changeDateformat(detailData.created_at)}}</p>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    new Vue({
        el: "#products",
        data() {
            return {
                breadcrumb: [],
                products: [],
                detailData: {},
                detailMode: false,
                viewMode: 'col-3',
                currentPage: 1,
                productsCount: 0,
                totalPageNum: 0,
                paginationArray: [],
                categoryID: '',
                subCategoryID: '',
                subSubCategoryID: '',
                loader: {},
                index: 0,
                error: '',
                searchAlbum: '',
                tag: '',
                editCategory: '',
                editSubCategory: '',
                editSubSubCategory: '',
                categories: '',
                subCategories: '',
                subSubCategories: '',
                errors: []
            }
        },
        computed: {
            filteredList() {
                return this.products.filter(item => item.name.toLowerCase().includes(this.searchAlbum.toLowerCase()) == true)
            }
        },
        methods: {
            openLoader() {
                this.loader = this.$loading.show({
                    loader: 'dots',
                    backgroundColor: '#ffffff',
                    opacity: 0.5,
                    transparence: 0.5
                });
            },
            onSearchAlbumNameChange(event) {
                let name = event.target.value;
                console.log("search_albumname changed into this:", name);
                this.getProducts(1);
            },
            getProducts(page) {
                this.openLoader()
                $.ajax({
                    method: "POST",
                    url: `/getProducts`,
                    data: {
                        categoryID: this.categoryID,
                        subCategoryID: this.subCategoryID,
                        subSubCategoryID: this.subSubCategoryID,
                        name: this.searchAlbum,
                        page,
                    }
                }).done(res => {
                    if (res.status) {
                        if (res.breadcrumb) this.breadcrumb = res.breadcrumb
                        this.products = res.data;
                        if (res.productsCount) {
                            this.productsCount = res.productsCount;
                            let reminder = this.productsCount % 100 == 0 ? 0 : 1;
                            this.totalPageNum = Math.floor(this.productsCount / 100) + reminder
                        }
                        ;
                        this.getPaginationArray(page);
                        this.loader.hide()
                    }
                })
            },
            searchByTag(tag) {
                location.href = "/search?tag=" + tag;

            },
            getCategories() {
                $.ajax({
                    method: "GET",
                    url: '/getCategory'
                }).done(res => {
                    if (res.status) {
                        this.categories = res.data;
                    } else {
                        console.log("Error occupied in getCategory function of productView.ejs.");
                    }
                    console.log("this is the result of the request:---", res);
                })
            },
            getSubCategories(categoryID) {
                $.ajax({
                    method: "POST",
                    url: '/getSubCategory',
                    data: {
                        categoryID: categoryID
                    }
                }).done(res => {
                    if (res.status) {
                        this.subCategories = res.data;
                    } else {
                        console.log("Error occupied in getSubCategory function of productView.ejs");
                    }
                })
            },
            getSubSubCategories(categoryID, subCategoryID) {
                $.ajax({
                    method: "POST",
                    url: '/getSubSubCategory',
                    data: {
                        categoryID: categoryID,
                        subCategoryID: subCategoryID
                    }
                }).done(res => {
                    if (res.status) {
                        this.subSubCategories = res.data;
                    } else {
                        console.log("Error occupied in getSubSubCategory function of productView.ejs");
                    }
                })
            },
            viewDetail(item, index) {
                console.log(item)
                this.index = item._id;
                this.detailData = item;
                this.detailMode = true;
                setTimeout(() => {
                    $(".gallery").magnificPopup({
                        delegate: "a",
                        type: "image",
                        tLoading: "Loading image #%curr%...",
                        mainClass: "mfp-img-mobile",
                        gallery: {
                            enabled: true,
                            navigateByImgClick: true,
                            preload: [0, 1] // Will preload 0 - before current, and 1 after the current image
                        },
                        image: {
                            tError: '<a href="%url%">The image #%curr%</a> could not be loaded.'
                        }
                    });
                }, 50);
            },
            setPage(page) {
                this.getPaginationArray(page);
                this.getProducts(page)
            },
            getPaginationArray(page) {
                this.currentPage = page
                this.paginationArray = []
                if (page < 4) {
                    for (let i = 1; i <= this.totalPageNum; i++) {
                        this.paginationArray.push(i);
                        if (this.paginationArray.length == 5) break;
                    }
                    return
                }
                if (page > this.totalPageNum - 4) {
                    for (let i = this.totalPageNum - 4; i <= this.totalPageNum; i++) {
                        this.paginationArray.push(i)
                    }
                    return
                }
                for (let i = page - 2; i <= page + 2; i++) {
                    this.paginationArray.push(i)
                }
            },
            viewProducts() {
                this.detailMode = false;
            },
            changeView(mode) {
                this.viewMode = mode
            },
            changeDateformat(timestamp) {
                let date = new Date(timestamp)
                return date.toLocaleString();
            }
        },
        mounted() {
            let param = new URL(window.location.href).pathname
            param = param.split('/subCategory/')
            this.categoryID = param[0].split('category/')[1];
            this.subCategoryID = param[1].split('/subSubCategory/')[0];
            this.subSubCategoryID = param[1].split('/subSubCategory/')[1];
            setTimeout(() => {
                this.getProducts(1);
                this.getCategories();
                this.getSubCategories(this.categoryID);
                this.getSubSubCategories(this.categoryID, this.subCategoryID);
                this.editCategory = this.categoryID;
                this.editSubCategory = this.subCategoryID;
                this.editSubSubCategory = this.subSubCategoryID;
            }, 200);

            let urlParams = new URLSearchParams(window.location.search);
            let _id = urlParams.get('p');

            if (_id){
                let self = this;

                setTimeout(() => {

                    $.ajax({
                        method: "GET",
                        url: '/api/products/'+_id,
                        success:function (data) {
                            let product = data.product;
                            self.viewDetail(product,0)
                        }

                    })


                }, 300)

            }




        },
    })
</script>