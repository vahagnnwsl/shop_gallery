<% layout('layout/app') -%>


<div class="home-wrap" id="category">
    <div class="modal fade" id="moveModal" tabindex="-1" role="dialog" aria-labelledby="moveModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title w-100 font-weight-bold" id="moveModalLabel">Move to ...</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="path">Path</label>
                        <div name="path">
                            <select v-model="batchCategory" style="width: 30%;" @change="onBatchCategoryChange($event)">
                                <option v-if="categories" v-for="cat in categories" v-bind:value="cat.categoryID">
                                    {{cat.name}}
                                </option>
                            </select>

                            <select v-model="batchSubCategory" style="width: 30%;"
                                    @change="onBatchSubCategoryChange($event)">
                                <option v-if="subCategories1" v-for="subcat in subCategories1"
                                        v-bind:value="subcat.subCategoryID">{{subcat.name}}
                                </option>
                            </select>

                            <select v-model="batchSubSubCategory" style="width: 30%;"
                                    @change="onBatchSubSubCategoryChange($event)">
                                <option v-if="subSubCategories1" v-for="subsubcat in subSubCategories1"
                                        v-bind:value="subsubcat.subSubCategoryID">{{subsubcat.name}}
                                </option>
                            </select>
                        </div>
                        <p v-if="errors_movemodal.length">
                        <ul style="color:red;">
                            <li v-for="error in errors_movemodal">{{ error }}</li>
                        </ul>
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <!-- <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button> -->
                    <button type="button" class="btn btn-default" @click.prevent="savePath()">Save changes</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="categoryCreateModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header text-center">
                    <h4 class="modal-title w-100 font-weight-bold">Create Category</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body mx-3">
                    <form id="categoryForm" class="needs-validation" novalidate>
                        <div class="md-form mb-5">
                            <i class="fab fa-buffer prefix grey-text"></i>
                            <input type="text" id="categoryName" class="form-control validate" name="categoryName"
                                   required>
                            <label data-error="wrong" data-success="right" for="categoryName">Category Name</label>
                        </div>
                        <div class="input-group">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="categoryImage">Category Image</span>
                            </div>
                            <div class="custom-file">
                                <input accept="image/*" type="file" class="custom-file-input" id="fileInput"
                                       aria-describedby="categoryImage" name="fileInput">
                                <label class="custom-file-label" for="fileInput">Choose file</label>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-default" @click.prevent="createCategory()">Create</button>
                </div>
            </div>
        </div>
    </div>

    <br>
    <div class="row">
        <div class="col-md-6 searchdiv">
            <input type="text" id="searchCategory" name="searchCategory" placeholder="Search..." @change="search">
        </div>
        <div class="col-md-6 categorydiv">
            <a href="" class="btn btn-default btn-rounded mb-4 " data-toggle="modal" data-target="#categoryCreateModal"
               style="float: right;">Create
                Category</a>
        </div>
    </div>

    <div class="modal fade" id="changeCategoryImage" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Change image</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form method="post" @submit.prevent="changeImageAction">
                    <div class="modal-body">
                        <input type="hidden" v-model="category_image.category_id" name="id">
                        <input type="hidden" v-model="category_image.category_type" name="type">
                        <div class="form-outline form-white">
                            <input type="file" id="category_image" required @change="selectNewImgForCategory"
                                   class="form-control" name="file"/>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save changes</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="mt-3 row" v-if="categoryData.length">
        <div v-for="(item, index) in categoryData" :key="index" class="col-md-4 col-sm-6 col-xs-12 mt-3">
            <div class="card">
                <div class="view overlay">
                    <img class="card-img-top" :src="item.imageUrl" alt="Card image cap">
                    <!-- <a :href="'/category?category=' + item.categoryID"> -->

                    <template v-if="item.subSubCategoryID && item.subCategoryID && item.categoryID">
                        <a :href="'/category/'+item.categoryID+'/subCategory/'+item.subCategoryID+'/subSubCategory/'+item.subSubCategoryID">
                            <div class="mask rgba-white-slight waves-effect waves-light"></div>
                        </a>
                    </template>

                    <template v-if="!item.subSubCategoryID && item.subCategoryID && item.categoryID">
                        <a :href="'/category/'+item.categoryID+'/subCategory/'+item.subCategoryID">
                            <div class="mask rgba-white-slight waves-effect waves-light"></div>
                        </a>
                    </template>

                    <template v-if="!item.subSubCategoryID && !item.subCategoryID && item.categoryID">
                        <a :href="'/category/' + item.categoryID">
                            <div class="mask rgba-white-slight waves-effect waves-light"></div>
                        </a>
                    </template>

                </div>
                <div class="card-body d-flex align-items-center">
                    <h3 class="card-title">{{item.name}}</h3>


                    <template v-if="item.subSubCategoryID && item.subCategoryID && item.categoryID">
                        <button type="button" class="btn btn-danger waves-effect btn-sm ml-auto"
                                @click.prevent="deleteCategory(item._id,'subSubCategory')"><i
                                    class="fas fa-trash-alt"></i></button>

                        <button type="button" class="btn btn-primary waves-effect btn-sm ml-auto"
                                @click.prevent="changeImage(item._id,'subSubCategory')"><i
                                    class="fas fa-images mr-1"></i></button>
                    </template>

                    <template v-if="!item.subSubCategoryID && item.subCategoryID && item.categoryID">
                        <button type="button" class="btn btn-danger waves-effect btn-sm ml-auto"
                                @click.prevent="deleteCategory(item._id,'subCategory')"><i class="fas fa-trash-alt"></i>
                        </button>

                        <button type="button" class="btn btn-primary waves-effect btn-sm ml-auto"
                                @click.prevent="changeImage(item._id,'subCategory')"><i class="fas fa-images mr-1"></i>
                        </button>
                    </template>

                    <template v-if="!item.subSubCategoryID && !item.subCategoryID && item.categoryID">
                        <button type="button" class="btn btn-danger waves-effect btn-sm ml-auto"
                                @click.prevent="deleteCategory(item._id,'category')"><i class="fas fa-trash-alt"></i>
                        </button>

                        <button type="button" class="btn btn-primary waves-effect btn-sm ml-auto"
                                @click.prevent="changeImage(item._id,'category')"><i class="fas fa-images mr-1"></i>
                        </button>

                    </template>


                </div>
            </div>
        </div>
    </div>


    <div class="row mt-4">
        <h1 class="w-100 mt-3 pl-3 border-bottom text-info" v-if="productsData.length">Products</h1>

        <div class="col-md-12">
            <label v-if="checkedAlbums.length">{{checkedAlbums.length}} item(s) selected </label>
            <button data-toggle="modal" data-target="#moveModal" v-if="checkedAlbums.length "
                    class="btn btn-blue btn-rounded btn-md">Move to...
            </button>
            <br/><br/>
        </div>

        <div v-for="(item, index) in productsData" :key="index" class="col-6 col-sm-4 col-md-3 mb-2">
            <input type="checkbox" class="checkbox" :value="item._id" v-model="checkedAlbums"
                   style="position:absolute; margin-top: 5px; margin-left:5px; z-index: 100; transform: scale(1.5);"/>
            <div class="card">
                <div class="view overlay">
                    <img class="card-img-top figure-img img-fluid"
                         :src="item.images[item.cover!==undefined?item.cover:0]" alt="Card image cap">
                    <a :href="'/category/'+item.categoryID+'/subCategory/'+item.subCategoryID+'/subSubCategory/'+item.subSubCategoryID">
                        <div class="mask rgba-white-slight"></div>
                    </a>
                </div>
                <div class="rounded-bottom mdb-color lighten-3 text-center pt-3">
                    <ul class="list-unstyled list-inline font-small m-0">

                        <input type="text" class="small list-inline-item pr-2 float-left ml-1" style="width: 63%;"
                               v-model="item.name" @change="onAlbumNameChange($event, item._id)"/>
                        <!--                          -->


                        <li class="list-inline-item float-right mr-1">
                            <p class="white-text small"><i class="fas fa-images mr-1"></i>{{item.images.length}}</p>
                        </li>

                        <li class="list-inline-item float-right mr-2">
                            <p class="white-text small"><i class="fas fa-trash-alt"
                                                           @click.prevent="deleteAlbum(item._id)"
                                                           style="cursor: pointer;"></i></p>
                            <!--                                                       @click.prevent="deleteAlbum(item._id)" -->

                        </li>

                    </ul>
                </div>
            </div>
        </div>
    </div>
    <div class="d-flex mt-4" v-if="productsData.length">
        <nav aria-label="Page navigation example" class="m-auto">
            <ul class="pagination pagination-circle pg-blue">
                <li class="page-item" :class="currentPage == 1 ? 'disabled': ''">
                    <a class="page-link" @click.prevent="setPage(1)">First</a>
                </li>

                <li class="page-item" :class="currentPage == 1 ? 'disabled': ''">
                    <a class="page-link" aria-label="Previous" @click.prevent="setPage(currentPage - 1)">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only">Previous</span>
                    </a>
                </li>


                <li class="page-item" v-if="showPages().includes(index)" v-for="(item, index) in totalPage"
                    :class="item==currentPage?'active':''"
                    :key="index"><a class="page-link" @click.prevent="setPage(item)">{{item}}</a></li>

                <li class="page-item" :class="currentPage == totalPage ? 'disabled': ''">
                    <a class="page-link" aria-label="Next" @click.prevent="setPage(currentPage + 1)">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only">Next</span>
                    </a>
                </li>
                <li class="page-item" :class="currentPage == totalPage ? 'disabled': ''"><a class="page-link"
                                                                                            @click.prevent="setPage(totalPage)">Last</a>
                </li>
            </ul>
        </nav>
    </div>
    <vue-snotify></vue-snotify>
</div>
<script>

    new Vue({
        el: "#category",
        data() {
            return {
                loader: {},
                categoryData: [],
                productsData: [],
                searchCategory: '',
                currentPage: 1,
                totalPage: 0,
                term: '',
                checkedAlbums: [],
                categories: [],
                subCategories: [],
                subSubCategories: [],
                subCategories1: [],
                subSubCategories1: [],
                batchCategory: '',
                batchSubCategory: '',
                batchSubSubCategory: '',
                errors_movemodal: [],
                category_image: {
                    category_id: '',
                    category_type: '',
                    file: null
                }

            }
        },
        mounted() {
            const self = this
            setTimeout(function () {
                self.get_categories()
                self.get_products()
                self.getCategories()
            }, 200)

        },
        methods: {

            selectNewImgForCategory() {

            },
            changeImageAction: function () {

                let formData = new FormData();
                formData.append('id', this.category_image.category_id);
                formData.append('type', this.category_image.category_type);
                let image = $('#category_image').prop('files')[0];

                console.log(image)
                formData.append('image',image);
                $.ajax({
                    method: "POST",
                    url: `/api/categories/update-image`,
                    data: formData,
                    processData: false,
                    contentType: false
                }).done((res) => {

                    location.reload()
                });
                console.log();
            },
            changeImage(id, type) {

                this.category_image.category_id = id;
                this.category_image.category_type = type;
                $('#changeCategoryImage').modal('show')

            },
            openLoader() {
                this.loader = this.$loading.show({
                    loader: 'dots',
                    backgroundColor: '#ffffff',
                    opacity: 0.5,
                    transparence: 0.5
                });
            },
            createCategory() {
                var forms = document.getElementsByClassName('needs-validation');
                this.openLoader()
                var validation = Array.prototype.filter.call(forms, function (form) {
                    if (form.checkValidity() !== false) {
                        $('#categoryCreateModal').hide();
                        let formData = new FormData()
                        let image = $('#fileInput').get(0).files[0];
                        formData.append('categoryImage', image);
                        formData.append('categoryName', $('#categoryName').val());
                        $.ajax({
                            method: "POST",
                            url: "createCategory",
                            data: formData,
                            processData: false,
                            contentType: false,
                        }).done((res) => {
                            if (res.status) {
                                this.Snotify.success(res.msg, {
                                    position: 'rightTop'
                                });
                            }
                            location.reload()
                        });
                    } else {
                        $('.vld-overlay').removeClass('is-active')
                        this.Snotify.warning('Please insert valid value.', {
                            position: 'rightTop'
                        });
                    }
                    form.classList.add('was-validated');
                });
            },
            showPages() {
                var array = [];

                let min = this.currentPage - 4;
                let max = this.currentPage + 4;
                if (this.currentPage < 4) {
                    max = 8;
                }

                for (let x = min; x <= max; x++) {
                    if (x => 0) {
                        array.push(x);
                    }
                }
                return array;
            },
            deleteCategory(id, type) {
                swal({
                    title: "Confirm",
                    text: "Are you sure to delete this Item?",
                    icon: "warning",
                    button: "OK",
                })
                    .then((willDelete) => {
                        if (willDelete) {
                            $.ajax({
                                url: `/api/categories/${id}`,
                                method: 'delete',
                                data: {
                                    type: type
                                }
                            }).done(async (res) => {
                               location.reload()
                            })
                        }
                    }).catch((err) => {

                });
            },
            get_categories: function () {
                var self = this;

                $.ajax({
                    method: "GET",
                    url: `/api/categories?term=${self.term}`,
                    success: function (data) {
                        self.categoryData = data.categories
                        console.log(self.categoryData)
                    },
                    beforeSend: function () {
                        // self.openLoader();
                    },
                    complete: function () {
                        // self.loader.hide();
                    }
                });

            },
            get_products: function () {
                var self = this;
                $.ajax({
                    method: "GET",
                    url: `/api/products?term=${self.term}&page=${self.currentPage}`,
                    success: function (data) {
                        self.productsData = data.products.docs
                        self.totalPage = Math.round(data.products.total / 100);
                        console.log(self.totalPage)
                    },
                    beforeSend: function () {
                        self.openLoader();
                    },
                    complete: function () {
                        self.loader.hide();
                    }
                });
            },
            setPage: function (page) {
                this.currentPage = page;
                this.get_products()
            },
            search(event) {
                if (event.target.value.length > 2 || event.target.value.length === 0) {
                    this.term = event.target.value;
                    this.currentPage = 1;
                    this.get_products()
                    this.get_categories()
                }
            },
            getCategories() {
                $.ajax({
                    method: "GET",
                    url: '/getCategory'
                }).done(res => {
                    if (res.status) {
                        this.categories = res.data;
                    } else {
                        console.log("Error occupied in getCategory function of productView.ejs.");
                    }
                    console.log("this is the result of the request:---", res);
                })
            },
            getSubCategories(categoryID, flag) {
                $.ajax({
                    method: "POST",
                    url: '/getSubCategory',
                    data: {
                        categoryID: categoryID
                    }
                }).done(res => {
                    if (res.status) {
                        if (flag) {
                            this.subCategories = res.data;
                        } else {
                            this.subCategories1 = res.data;
                        }

                    } else {
                        console.log("Error occupied in getSubCategory function of productView.ejs");
                    }
                })
            },
            getSubSubCategories(categoryID, subCategoryID, flag) {
                $.ajax({
                    method: "POST",
                    url: '/getSubSubCategory',
                    data: {
                        categoryID: categoryID,
                        subCategoryID: subCategoryID
                    }
                }).done(res => {
                    if (res.status) {
                        if (flag) {
                            this.subSubCategories = res.data;
                        } else {
                            this.subSubCategories1 = res.data;
                        }

                    } else {
                        console.log("Error occupied in getSubSubCategory function of productView.ejs");

                    }
                })
            },
            onBatchCategoryChange(event) {
                this.getSubCategories(event.target.value, false);
                this.subSubCategories1 = [];
                this.batchSubCategory = '';
                this.batchSubSubCategory = '';
                this.errors_movemodal = [];
            },
            onBatchSubCategoryChange(event) {
                this.getSubSubCategories(this.batchCategory, event.target.value, false);
                this.batchSubSubCategory = '';
                this.errors_movemodal = [];
            },
            onBatchSubSubCategoryChange(event) {
                console.log("---Batch SubSubCategory path changed into---", this.batchCategory, this.batchSubCategory, event.target.value);
                this.errors_movemodal = [];
            },
            savePath() {
                let categoryID = this.batchCategory;
                let subCategoryID = this.batchSubCategory;
                let subSubCategoryID = this.batchSubSubCategory;
                this.errors_movemodal = [];
                if (!categoryID) {
                    this.errors_movemodal.push("Please select Category.");
                    this.errors_movemodal.push("Please select SubCategory.");
                    this.errors_movemodal.push("Please select SubSubCategory.");
                } else if (!subCategoryID) {
                    this.errors_movemodal.push("Please select SubCategory.");
                    this.errors_movemodal.push("Please select SubSubCategory.");
                } else if (!subSubCategoryID) {
                    this.errors_movemodal.push("Please select SubSubCategory.");
                } else {
                    console.log("this is savePatch() function", this.checkedAlbums, categoryID, subCategoryID, subSubCategoryID);
                    let selectedAlbums = JSON.stringify(this.checkedAlbums);
                    this.openLoader();
                    $.ajax({
                        method: "POST",
                        url: "/editProductPath",
                        data: {
                            selectedAlbums, categoryID, subCategoryID, subSubCategoryID
                        }
                    }).done(res => {
                        this.loader.hide();
                        if (res.status) {
                            $('#moveModal').modal('hide')
                            location.reload();
                        } else {
                            this.error = 'Something went wrong'
                        }
                    })
                }
            },
            onAlbumNameChange(event, _id) {
                let name = event.target.value;
                $.ajax({
                    method: "POST",
                    url: '/setAlbumName',
                    data: {
                        _id, name
                    }
                }).done(res => {
                    if (res.status) {
                        console.log(res.msg);
                    } else {
                        console.log(res.msg);
                    }
                })
            },
            deleteAlbum(id) {
                swal({
                    title: "Confirm",
                    text: "Are you sure to delete this Album?",
                    icon: "warning",
                    button: "OK",
                })
                    .then((willDelete) => {
                        if (willDelete) {
                            $.ajax({
                                url: `/api/products/${id}`,
                                method: 'POST'
                            }).done(async (res) => {
                                if (res.status) {
                                    location.reload();
                                    console.log(res.msg);
                                }
                            })
                        }
                    }).catch((err) => {
                    console.log("Error occupied on deleteAlbum function");
                });
            },
        }
    })
</script>